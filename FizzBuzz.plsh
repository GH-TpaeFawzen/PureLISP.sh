(def divp
  (lambda (a b)
    (cond ((eq a nil) t)
          ((lt a b) nil)
          (t (divp (sub a b) b)))))

(def sub
  (lambda (a b)
    (cond ((eq b nil) a)
          (t (sub (cdr a) (cdr b))))))

(def eqnum (lambda (a b) (eq (length a) (length b))))

(def lt
  (lambda (a b)
    (cond ((eqnum a b) nil)
          ((and (not (eq a nil)) (eq b nil)) nil)
          ((and (eq a nil) (not (eq b nil))) t)
          (t (lt (cdr a) (cdr b))))))

(def and (lambda (a b) (cond (a b) (t nil))))

(def not (lambda (a) (cond (a nil) (t t))))

(def three '(n n n))

(def five '(n n n n n))

(def FB
  (lambda (n)
    (cond ((and (divp n three) (divp n five)) 'FizzBuzz)
          ((divp n three) 'Fizz)
          ((divp n five)  'Buzz)
          (t (length n)))))

(def FizzBuzz
  (lambda (n r)
    (cond ((eq n nil) r)
          (t (FizzBuzz (cdr n) (cons (FB n) r))))))

(def thirty '(
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 
))

(FizzBuzz thirty nil)

exit

