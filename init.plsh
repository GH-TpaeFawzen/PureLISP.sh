(def list (lambda a a))

(def and (lambda (a b) (cond (a b) (t nil))))

(def or (lambda (a b) (cond (a t) (t b))))

(def not (lambda (a) (cond (a nil) (t t))))

(def null (lambda (a) (eq a nil)))

(def reduce
  (lambda (f L i)
     (cond ((null L) i)
           (t (f (car L) (reduce f (cdr L) i))))))

(def append2 (lambda (a b) (reduce cons a b)))

(def append (lambda a (reduce append2 a nil)))

(def reverse
  (lambda (a)
    (cond ((null a) nil)
          (t (append (reverse (cdr a))
                     (list (car a)))))))

(def map
  (lambda (f a . b)
     (cond ((eq a nil) nil)
           ((eq b nil)
            (cons (f (car a))
                  (map f (cdr a))))
           (t
            (cons (f (car a) (car (car b)))
                  (map f (cdr a) (cdr (car b))))))))

(def pairs (lambda (a b) (map cons a b)))

(def assoc
  (lambda (k vs)
     (cond ((null vs) nil)
           ((eq (car (car vs)) k)
            (car vs))
           (t (assoc k (cdr vs))))))

(def member
  (lambda (k vs)
     (cond ((null vs) nil)
           ((eq (car vs) k) vs)
           (t (member k (cdr vs))))))

(def filter
  (lambda (f x)
     (cond ((null x) nil)
           ((f (car x))
            (cons (car x) (filter f (cdr x))))
           (t (filter f (cdr x))))))

(def fix (lambda (f) (f (lambda (x) ((fix f) x)))))

(def caar (lambda (x) (car (car x))))

(def cadr (lambda (x) (car (cdr x))))

(def cdar (lambda (x) (cdr (car x))))

(def cddr (lambda (x) (cdr (cdr x))))

(def inc (lambda (n) (cons 'n n)))

(def dec (lambda (n) (cdr n)))

(def + append)

(def 0 nil)

(def 1 (inc 0))

(def 2 (inc 1))

(def 3 (inc 2))

(def 4 (inc 3))

(def 5 (inc 4))

(def 6 (inc 5))

(def 7 (inc 6))

(def 8 (inc 7))

(def 9 (inc 8))

exit

