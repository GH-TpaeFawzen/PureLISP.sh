(def or (lambda (x y) (cond (x t) (t y))))

(def mkassoc
  (lambda (a b)
     (cond ((or (eq a nil) (eq b nil)) nil)
           (t (cons (cons (car a) (car b))
                    (mkassoc (cdr a) (cdr b))))))) 

(def k '(Apple Orange Lemmon))

(cons '= (cons k nil))

(def v '(120 210 180))

(cons '= (cons v nil))

(def vs (mkassoc k v))

(cons '= (cons '(mkassoc k v) (cons '= (cons vs 'nil))))

(def assoc
  (lambda (k vs)
     (cond ((eq vs '()) nil)
           ((eq (car (car vs)) k)
            (car vs))
           (t (assoc k (cdr vs))))))

(cons '(assoc 'Orange vs)
(cons '= (cons (assoc 'Orange vs) nil)))

(cons '(car (assoc 'Orange vs))
(cons '= (cons (car (assoc 'Orange vs)) nil)))

(cons '(cdr (assoc 'Orange vs))
(cons '= (cons (cdr (assoc 'Orange vs)) nil)))

exit

