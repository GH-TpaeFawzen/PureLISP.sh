(def or (lambda (x y) (cond (x t) (t y))))

(def mkassoc
  (lambda (a b)
     (cond ((or (eq a nil) (eq b nil)) nil)
           (t (cons (cons (car a) (car b))
                    (mkassoc (cdr a) (cdr b))))))) 

(def k '(Apple Orange Lemmon))

(def v '(120 210 180))

(def vs (mkassoc k v))

(def assoc
  (lambda (k vs)
     (cond ((eq vs '()) nil)
           ((eq (car (car vs)) k)
            (car vs))
           (t (assoc k (cdr vs))))))

(assoc 'Orange vs)

(car (assoc 'Orange vs))

(cdr (assoc 'Orange vs))

exit

