(def fix (lambda (f) (f (lambda (x) ((fix f) x)))))

(def append
  (lambda (a b)
     (cond ((eq a nil) b)
           (t (append (cdr a)
              (cons (car a) b))))))

(def 0 nil)

(def 1 '(0))

(def 10 '(0 0 0 0 0 0 0 0 0 0))

(length
  ((((fix
      (lambda (fib) (lambda (f1) (lambda (f2) (lambda (n)
        (cond ((eq n 0) f1) (t (((fib f2) (append f1 f2)) (cdr n)))))))))
      0) 1) 10))

exit

