(def and (lambda (a b) (cond (a b) (t nil))))

(def or  (lambda (a b) (cond (a t) (t b))))

(def not (lambda (a) (cond (a nil) (t t))))

(def le
  (lambda (a b)
    (cond ((and (eq a nil) (eq b nil)) t)
          ((and (not (eq a nil)) (not (eq b nil)))
           (cond ((eq (car a) (car b))
                  (le (cdr a) (cdr b)))
                 ((eq (car a) 'p) nil)
                 (t t))) 
          ((and (not (eq a nil)) (eq b nil))
           (eq (car a) 'n))
          ((and (eq a nil) (not (eq b nil)))
           (eq (car b) 'p)))))

(def 1+
  (lambda (x)
    (cond ((or (eq x nil) (eq (car x) 'p)) (cons 'p x))
          (t (cdr x)))))

(def 1-
  (lambda (x)
    (cond ((or (eq x nil) (eq (car x) 'n)) (cons 'n x))
          (t (cdr x)))))

(def 0 nil)

(def 5 '(p p p p p))

(def 10 '(p p p p p p p p p p))

(def tak
  (lambda (x y z)
    (cond ((le x y) z)
          (t (tak (tak (1- x) y z)
                  (tak (1- y) z x)
                  (tak (1- z) x y))))))

(length (tak 10 5 0))

exit

